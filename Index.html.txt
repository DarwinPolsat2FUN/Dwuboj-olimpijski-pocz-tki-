<!DOCTYPE html>
<html lang="pl">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="description" content="Dwubój olimpijski od podstaw – technika, plan treningowy, dieta, filmy oraz wyniki zawodników." />
<title>Dwubój Olimpijski — Trening od podstaw</title>
<style>
  body {
    font-family: Arial, sans-serif;
    margin: 0; background: #f8f9fa; color: #222;
  }
  header {
    background: #d62828; color: white; text-align: center; padding: 20px;
  }
  nav {
    background: #f77f00; display: flex; justify-content: center; padding: 10px 0; flex-wrap: wrap;
  }
  nav a {
    color: white; text-decoration: none; margin: 0 15px; font-weight: bold; padding: 8px 12px; border-radius: 6px;
  }
  nav a:hover {
    background: #bb3e03;
  }
  main {
    max-width: 1000px; margin: 20px auto; padding: 0 15px;
  }
  section {
    background: white; padding: 20px; margin-bottom: 30px; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  h2 {
    color: #d62828; margin-top: 0;
  }
  ul, ol {
    margin-left: 20px;
  }
  .video-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit,minmax(300px,1fr));
    gap: 20px;
  }
  .video-grid iframe {
    width: 100%; height: 180px; border-radius: 10px; border: none;
  }
  .social-buttons {
    text-align: center; margin-top: 20px;
  }
  .social-buttons a {
    display: inline-block; margin: 0 10px; padding: 10px 18px; border-radius: 6px; color: white; font-weight: bold; text-decoration: none;
  }
  .youtube { background: #FF0000; }
  .facebook { background: #3b5998; }
  .instagram { background: #E1306C; }
  table {
    width: 100%; border-collapse: collapse; margin-top: 15px;
  }
  table, th, td {
    border: 1px solid #ddd;
  }
  th, td {
    padding: 8px 12px; text-align: center;
  }
  th {
    background-color: #f77f00; color: white;
    cursor: pointer;
    user-select: none;
  }
  form {
    margin-top: 20px;
    display: flex; flex-wrap: wrap; gap: 15px;
  }
  form input[type="text"], form input[type="number"] {
    padding: 8px; border: 1px solid #ccc; border-radius: 5px;
    flex: 1 1 150px;
  }
  form button {
    background: #d62828; color: white; border: none; padding: 10px 20px;
    border-radius: 5px; cursor: pointer;
    flex: 1 1 100px;
  }
  form button:hover {
    background: #b02020;
  }
  @media (max-width: 600px) {
    form {
      flex-direction: column;
    }
    form input, form button {
      flex: 1 1 100%;
    }
  }
  #searchInput {
    margin-bottom: 10px;
    padding: 6px;
    width: 250px;
    border-radius: 5px;
    border: 1px solid #ccc;
  }
</style>
</head>
<body>

<header>
  <h1>Dwubój Olimpijski — Trening od podstaw</h1>
</header>

<nav>
  <a href="#wstep">Wstęp</a>
  <a href="#trening">Trening</a>
  <a href="#plan">Plan tygodniowy</a>
  <a href="#dieta">Dieta</a>
  <a href="#video">Wideo</a>
  <a href="#zawodnicy">Zawodnicy</a>
</nav>

<main>
  <section id="wstep">
    <h2>Wstęp</h2>
    <p>Dwubój olimpijski to dyscyplina siłowa składająca się z rwania i podrzutu — wymaga techniki, siły i szybkości. Ta strona pomoże Ci zacząć od podstaw.</p>
  </section>

  <section id="trening">
    <h2>Trening od podstaw</h2>
    <ul>
      <li><b>Rwanie</b> — dynamiczny ruch podnoszenia sztangi nad głowę jednym płynnym ruchem.</li>
      <li><b>Podrzut</b> — dwufazowy ruch: zarzut na klatkę i wybicie nad głowę.</li>
      <li>Ćwiczenia uzupełniające: przysiady, martwy ciąg, wyciskania, mobilność.</li>
    </ul>
  </section>

  <section id="plan">
    <h2>Plan tygodniowy</h2>
    <ol>
      <li><b>Poniedziałek:</b> Rwanie + technika</li>
      <li><b>Środa:</b> Podrzut + ćwiczenia siłowe</li>
      <li><b>Piątek:</b> Ćwiczenia uzupełniające + mobilność</li>
    </ol>
  </section>

  <section id="dieta">
    <h2>Dieta i regeneracja</h2>
    <p>Dbaj o odpowiednią ilość białka, węglowodanów i tłuszczów oraz regenerację przez sen i stretching.</p>
  </section>

  <section id="video">
    <h2>Materiały wideo</h2>
    <div class="video-grid">
      <iframe src="https://www.youtube.com/embed/yiZP9MynZj4" allowfullscreen title="Technika rwania"></iframe>
      <iframe src="https://www.youtube.com/embed/wuwG1b3pHaA" allowfullscreen title="Technika podrzutu"></iframe>
      <iframe src="https://www.youtube.com/embed/YXq6u4bXo6Q" allowfullscreen title="Przykładowy trening dwuboju"></iframe>
    </div>
    <div class="social-buttons">
      <a href="https://www.youtube.com/" target="_blank" class="youtube" rel="noopener noreferrer">YouTube</a>
      <a href="https://www.facebook.com/" target="_blank" class="facebook" rel="noopener noreferrer">Facebook</a>
      <a href="https://www.instagram.com/" target="_blank" class="instagram" rel="noopener noreferrer">Instagram</a>
    </div>
  </section>

  <section id="zawodnicy">
    <h2>Zawodnicy</h2>
    <label for="searchInput"><b>Filtruj po imieniu:</b></label>
    <input type="text" id="searchInput" placeholder="Wpisz imię..." />

    <table id="playersTable">
      <thead>
        <tr>
          <th data-sort="name">Imię ▼</th>
          <th data-sort="age">Wiek</th>
          <th data-sort="weight">Waga (kg)</th>
          <th data-sort="snatch">Rwanie (kg)</th>
          <th data-sort="cleanJerk">Podrzut (kg)</th>
          <th data-sort="deadlift">Martwy ciąg (kg)</th>
          <th>Akcje</th>
        </tr>
      </thead>
      <tbody>
        <!-- Wiersze dodawane dynamicznie -->
      </tbody>
    </table>

    <h3>Dodaj / Edytuj zawodnika</h3>
    <form id="playerForm">
      <input type="hidden" id="editIndex" value="-1" />
      <input type="text" id="name" placeholder="Imię" required />
      <input type="number" id="age" placeholder="Wiek" min="10" max="100" required />
      <input type="number" id="weight" placeholder="Waga (kg)" min="20" max="300" required />
      <input type="number" id="snatch" placeholder="Rwanie (kg)" min="0" max="500" required />
      <input type="number" id="cleanJerk" placeholder="Podrzut (kg)" min="0" max="500" required />
      <input type="number" id="deadlift" placeholder="Martwy ciąg (kg)" min="0" max="600" required />
      <button type="submit">Zapisz</button>
      <button type="button" id="cancelEdit">Anuluj</button>
    </form>
  </section>
</main>

<footer>
  &copy; 2025 Dwubój Olimpijski. Wszelkie prawa zastrzeżone.
</footer>

<script>
  const STORAGE_KEY = "dwuboj_zawodnicy";

  const defaultPlayers = [
    {name:"Bartek", age:14, weight:55, snatch:70, cleanJerk:90, deadlift:150},
    {name:"Krzysiek", age:12, weight:43, snatch:50, cleanJerk:70, deadlift:120},
    {name:"Kacper", age:14, weight:121, snatch:90, cleanJerk:120, deadlift:200},
    {name:"Michał", age:16, weight:78, snatch:85, cleanJerk:110, deadlift:180},
    {name:"Tomek", age:15, weight:68, snatch:75, cleanJerk:100, deadlift:160}
  ];

  let players = [];

  function loadPlayers() {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      try {
        players = JSON.parse(stored);
      } catch(e) {
        console.error("Błąd parsowania localStorage:", e);
        players = defaultPlayers;
      }
    } else {
      players = defaultPlayers;
    }
  }

  function savePlayers() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(players));
  }

  const tableBody = document.querySelector("#playersTable tbody");
  const form = document.getElementById("playerForm");
  const editIndexInput = document.getElementById("editIndex");
  const searchInput = document.getElementById("searchInput");
  const headers = document.querySelectorAll("#playersTable thead th[data-sort]");

  let currentSort = { key: "name", ascending: true };

  function renderTable(filter = "") {
    tableBody.innerHTML = "";

    let filteredPlayers = players.filter(p => p.name.toLowerCase().includes(filter));

    filteredPlayers.sort((a,b) => {
      let valA = a[currentSort.key];
      let valB = b[currentSort.key];
      if(currentSort.key === "name") {
        valA = valA.toLowerCase();
        valB = valB.toLowerCase();
        if(valA < valB) return currentSort.ascending ? -1 : 1;
        if(valA > valB) return currentSort.ascending ? 1 : -1;
        return 0;
      } else {
        return currentSort.ascending ? valA - valB : valB - valA;
      }
    });

    filteredPlayers.forEach((p, i) => {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${p.name}</td>
        <td>${p.age}</td>
        <td>${p.weight}</td>
        <td>${p.snatch}</td>
        <td>${p.cleanJerk}</td>
        <td>${p.deadlift}</td>
        <td>
          <button onclick="editPlayer(${i})">Edytuj</button>
          <button onclick="deletePlayer(${i})">Usuń</button>
        </td>
      `;
      tableBody.appendChild(row);
    });
  }

  function editPlayer(index) {
    const p = players[index];
    editIndexInput.value = index;
    form.name.value = p.name;
    form.age.value = p.age;
    form.weight.value = p.weight;
    form.snatch.value = p.snatch;
    form.cleanJerk.value = p.cleanJerk;
    form.deadlift.value = p.deadlift;
  }

  function deletePlayer(index) {
    if(confirm("Na pewno usunąć tego zawodnika?")) {
      players.splice(index,1);
      savePlayers();
      renderTable(searchInput.value.toLowerCase());
      resetForm();
    }
  }

  function resetForm() {
    editIndexInput.value = -1;
    form.reset();
  }

  form.addEventListener("submit", e => {
    e.preventDefault();
    const idx = Number(editIndexInput.value);
    const newPlayer = {
      name: form.name.value.trim(),
      age: Number(form.age.value),
      weight: Number(form.weight.value),
      snatch: Number(form.snatch.value),
      cleanJerk: Number(form.cleanJerk.value),
      deadlift: Number(form.deadlift.value)
    };
    if(idx === -1) {
      players.push(newPlayer);
    } else {
      players[idx] = newPlayer;
    }
    savePlayers();
    renderTable(searchInput.value.toLowerCase());
    resetForm();
  });

  document.getElementById("cancelEdit").addEventListener("click", e => {
    resetForm();
  });

  searchInput.addEventListener("input", () => {
    renderTable(searchInput.value.toLowerCase());
  });

  headers.forEach(th => {
    th.addEventListener("click", () => {
      const key = th.getAttribute("data-sort");
      if(currentSort.key === key) {
        currentSort.ascending = !currentSort.ascending;
      } else {
        currentSort.key = key;
        currentSort.ascending = true;
      }
      headers.forEach(h => h.textContent = h.textContent.replace(/[\u25B2\u25BC]/g,""));
      th.textContent += currentSort.ascending ? " ▲" : " ▼";
      renderTable(searchInput.value.toLowerCase());
    });
  });

  window.editPlayer = editPlayer;
  window.deletePlayer = deletePlayer;

  window.addEventListener("load", () => {
    headers.forEach(h => h.textContent = h.textContent.replace(/[\u25B2\u25BC]/g,""));
    headers[0].textContent += " ▼";
    loadPlayers();
    renderTable();
  });
</script>

</body>
</html>